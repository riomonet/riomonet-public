<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Triangles</title>
<meta name="generator" content="Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
</style>
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
<link rel="stylesheet" type="text/css" href="/styles.css">
</head>
<body>
<div id="content" class="content">
<div id="table-of-contents" role="doc-toc">
<h2>Table of Contents</h2>
<div id="text-table-of-contents" role="doc-toc">
<ul>
<li><a href="#orgb77d75c">Solid 3 dimensional Objectbs</a>
<ul>
<li><a href="#orgc54a7c6">What we currently know</a></li>
<li><a href="#org68f4f4b">new idea, a mesh of triangles</a></li>
</ul>
</li>
<li><a href="#org407eb9e">Model a cube using a Mesh.</a>
<ul>
<li><a href="#orgc5e9303">Left handed coordinate system</a>
<ul>
<li><a href="#org2e64bde">OpenGL and Direct X</a></li>
</ul>
</li>
<li><a href="#org609be40">Data Structures For our model</a>
<ul>
<li><a href="#org8fde65c">A list of mesh vertices stored as an array.</a></li>
<li><a href="#org491d222">A new type called <code>face_t</code> that represents a 3d triangle</a></li>
<li><a href="#org268e438">List of faces(array of triangles)</a></li>
<li><a href="#org5fe2d32">A struct to store a projected triangle</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#org4c9b369">Your Assigment</a>
<ul>
<li><a href="#org4eac838">Pseudocode</a>
<ul>
<li><a href="#orgfe79af0">Globals</a></li>
<li><a href="#orgf35e29c">Apply transformations And Projections (happens every frame)</a></li>
<li><a href="#org67c58f2">Draw the vertices (happens every frame)</a></li>
</ul>
</li>
<li><a href="#org89171a6">Modules</a>
<ul>
<li><a href="#org1f59076">mesh module</a></li>
<li><a href="#org73678c6">triangle Module</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>


<div id="outline-container-orgb77d75c" class="outline-2">
<h2 id="orgb77d75c">Solid 3 dimensional Objectbs</h2>
<div class="outline-text-2" id="text-orgb77d75c">
<p>
Our goal is to render and animate 3d objects on the monitor. We want
our objects in our virtual world to appear as they would in the real
world. We want our virtual models to give the impression that they are
solid objects in 3 dimensional space. A well known model is the
<a href="https://en.wikipedia.org/wiki/Stanford_bunny#/media/File:Stanford_Bunny.stl">Stanford Bunny 3d Model</a>
</p>
</div>

<div id="outline-container-orgc54a7c6" class="outline-3">
<h3 id="orgc54a7c6">What we currently know</h3>
<div class="outline-text-3" id="text-orgc54a7c6">
<ul class="org-ul">
<li>what a game loop is</li>
<li>what a color buffer is</li>
<li>how a color buffer maps 
to your screens resolution</li>
<li>How to draw a single pixel in any color
anywhere on the screen</li>
<li>how to render a rectangle any size
anywhere on the screen.</li>
<li>how to translate, scale and rotate
a vector</li>
<li>what vectors and scalars are</li>
<li>how to place vectors in 3d space.</li>
<li>how to build the skeleton of a 3d object</li>
<li>How to create a Fixed time step to throttle
our frame rate.</li>
<li>etc..</li>
</ul>

<p>
To render a 3d model that looks like a solid object we will  use a
3d mesh. As in this image.
</p>


<div id="org0dcb586" class="figure">
<p><img src="assets/img/BunnyWire.gif" alt="BunnyWire.gif" />
</p>
</div>
</div>
</div>

<div id="outline-container-org68f4f4b" class="outline-3">
<h3 id="org68f4f4b">new idea, a mesh of triangles</h3>
<div class="outline-text-3" id="text-org68f4f4b">
<p>
A 3d mesh is a <b>collection</b> of <b>triangles</b> arranged in 3d space to create
the impression of a solid object. Each <b>triangle</b> is defined by 3 corner
points. The name we give these points is <b>Vertices</b>.
</p>

<p>
A <b>triangle</b> is defined by it's 3 <b>vertices</b> and <b>3 edges</b>.  Notice how the
shapes below are built out of many little triangles. Each triangle
placed in a precise location in 3d space.
</p>


<div id="org4c564d7" class="figure">
<p><img src="assets/img/icosphere_refinement.jpg" alt="icosphere_refinement.jpg" />
</p>
</div>
</div>
</div>
</div>



<div id="outline-container-org407eb9e" class="outline-2">
<h2 id="org407eb9e">Model a cube using a Mesh.</h2>
<div class="outline-text-2" id="text-org407eb9e">
<p>
We are going to build a mesh for a cube model. We want the cube to
appear as a solid object. So we are going to model it using
triangles. We will build the mesh using
</p>
<ul class="org-ul">
<li>8 vertices</li>
<li>12 triangles</li>
<li>each side of the cube is represented by 2 triangular faces
for a total of 12 faces.</li>
</ul>


<div id="org788a0b6" class="figure">
<p><img src="assets/img/cube_with_points.jpg" alt="cube_with_points.jpg" />
</p>
</div>
</div>

<div id="outline-container-orgc5e9303" class="outline-3">
<h3 id="orgc5e9303">Left handed coordinate system</h3>
<div class="outline-text-3" id="text-orgc5e9303">
<p>
Our mesh is made from 8-3d points(vectors). Each corner of the mesh is
a vertex, having coordinates x, y, and z.  We are going to use a left
handed coordinate system for our mesh. In a left handed coordinate
system as an object goes deeper into space, away from the viewer, the
z value increases.
</p>
</div>

<div id="outline-container-org2e64bde" class="outline-4">
<h4 id="org2e64bde">OpenGL and Direct X</h4>
<div class="outline-text-4" id="text-org2e64bde">
<p>
Open Gl and Direct X treat their z values differently.
</p>
</div>

<div id="outline-container-org0378969" class="outline-5">
<h5 id="org0378969">Direct X uses a left handed coordinate system, meaning</h5>
<div class="outline-text-5" id="text-org0378969">
<p>
as z grows larger it moves way from us into space, deeper into the
screen.
</p>
</div>
</div>

<div id="outline-container-orgf75d1f6" class="outline-5">
<h5 id="orgf75d1f6">Open GL uses a right hande coordinate system</h5>
<div class="outline-text-5" id="text-orgf75d1f6">
<p>
as z grows larger it moves towards us and gets closer and closer.
</p>
</div>
</div>
</div>
</div>



<div id="outline-container-org609be40" class="outline-3">
<h3 id="org609be40">Data Structures For our model</h3>
<div class="outline-text-3" id="text-org609be40">
<hr />
</div>
<div id="outline-container-org8fde65c" class="outline-4">
<h4 id="org8fde65c">A list of mesh vertices stored as an array.</h4>
<div class="outline-text-4" id="text-org8fde65c">
<p>
Lets create an array of <code>vec3_t</code>. Each <code>vec3_t</code>
will hold the x, y, z coordinates of a vertex
that belongs to our mesh.
</p>

<div class="org-src-container">
<pre class="src src-c"><span class="org-type">vec3_t</span> <span class="org-variable-name">mesh_vertices</span>[8] = {
  {.x = -1, .y = -1, .z = -1}, <span class="org-comment-delimiter">//</span><span class="org-comment">1</span>
  {.x = -1, .y =  1, .z = -1}, <span class="org-comment-delimiter">//</span><span class="org-comment">2</span>
  {.x =  1, .y =  1, .z = -1}, <span class="org-comment-delimiter">//</span><span class="org-comment">3</span>
  {.x =  1, .y = -1, .z = -1}, <span class="org-comment-delimiter">//</span><span class="org-comment">4</span>
  {.x =  1, .y =  1, .z =  1}, <span class="org-comment-delimiter">//</span><span class="org-comment">5</span>
  {.x =  1, .y = -1, .z =  1}, <span class="org-comment-delimiter">//</span><span class="org-comment">6</span>
  {.x = -1, .y =  1, .z =  1}, <span class="org-comment-delimiter">//</span><span class="org-comment">7</span>
  {.x = -1, .y = -1, .z =  1}  <span class="org-comment-delimiter">//</span><span class="org-comment">8</span>
};
</pre>
</div>
</div>
</div>

<div id="outline-container-org491d222" class="outline-4">
<h4 id="org491d222">A new type called <code>face_t</code> that represents a 3d triangle</h4>
<div class="outline-text-4" id="text-org491d222">
<p>
<code>face_t</code> is a struct that holds an index into the list of verices
A triangular face is made up of 3 vertices. so we need 3 index<sub>values</sub>.
</p>

<div class="org-src-container">
<pre class="src src-c"><span class="org-keyword">typedef</span> <span class="org-keyword">struct</span> {
  <span class="org-type">int</span> <span class="org-variable-name">a</span>,
      <span class="org-variable-name">b</span>,
      <span class="org-variable-name">c</span>
} <span class="org-type">face_t</span>;
</pre>
</div>
</div>
</div>

<div id="outline-container-org268e438" class="outline-4">
<h4 id="org268e438">List of faces(array of triangles)</h4>
<div class="outline-text-4" id="text-org268e438">
<p>
There are 12 triangular(faces) for the cube mesh.  We define a
constant <code>#define N_MESH_FACES 12</code>, this the number of trianlges for our
mesh. We create an <b>array of triangles</b> using the triangle type
<code>face_t</code>. In the following code snippet we Declare and define twelve
triangles each one made up of 3 vertices. Members of the struct a, b,
c each refer to one vertex of the mesh.
</p>
</div>
<div id="outline-container-orgb1f37d3" class="outline-5">
<h5 id="orgb1f37d3">Order matters</h5>
<div class="outline-text-5" id="text-orgb1f37d3">
<p>
The order in which vertices are specified matters. Each face
has a front and back side.  We will specify the front a face by
enumerating through the veritces of face in <b>Clockwise order.</b> 
</p>


<div class="org-src-container">
<pre class="src src-c">
<span class="org-comment-delimiter">//</span><span class="org-comment">TODO values deliberately left out</span>
<span class="org-type">face_t</span> <span class="org-variable-name">mesh_faces</span>[N_MESH_FACES] = {
  <span class="org-comment-delimiter">//</span><span class="org-comment">front</span>
  { .a = , .b = , .c = }, 
  { .a = , .b = , .c = },
  <span class="org-comment-delimiter">//</span><span class="org-comment">right</span>
  { .a = , .b = , .c = },
  { .a = , .b = , .c = },
  <span class="org-comment-delimiter">//</span><span class="org-comment">back</span>
  { .a = , .b = , .c = },
  { .a = , .b = , .c = },
  <span class="org-comment-delimiter">//</span><span class="org-comment">left</span>
  { .a = , .b = , .c = },
  { .a = , .b = , .c = },
  <span class="org-comment-delimiter">//</span><span class="org-comment">top </span>
  { .a = , .b = , .c = },
  { .a = , .b = , .c = },
  <span class="org-comment-delimiter">//</span><span class="org-comment">bottom</span>
  { .a =6 , .b = 8, .c = 1 },
  { .a =6 , .b = 1, .c =4 },
};

</pre>
</div>
</div>
</div>
</div>



<div id="outline-container-org5fe2d32" class="outline-4">
<h4 id="org5fe2d32">A struct to store a projected triangle</h4>
<div class="outline-text-4" id="text-org5fe2d32">
<p>
This struct is where we store the vertices of a triangle after they
have been projected into 2d space. Each vertex is now <code>vec2_t</code>.
</p>

<div class="org-src-container">
<pre class="src src-c">
<span class="org-keyword">typedef</span> <span class="org-keyword">struct</span> {
  <span class="org-type">vec2_t</span> <span class="org-variable-name">points</span>[3];
}<span class="org-type">triangle_t</span>;

</pre>
</div>


<div id="org7cdcef5" class="figure">
<p><img src="assets/img/cube_with_numbered_vertex.jpg" alt="cube_with_numbered_vertex.jpg" />
</p>
</div>
<hr />
</div>
</div>
</div>
</div>

<div id="outline-container-org4c9b369" class="outline-2">
<h2 id="org4c9b369">Your Assigment</h2>
<div class="outline-text-2" id="text-org4c9b369">
<hr />
<p>
Start a new file.  Copy everything over from the old file.  But
you can delete any functions, arrays, variables and definitions that
have to do with our previous 9<sup>3</sup> cube model. We still need to keep
all of our basic drawing functions, like draw rectangle and draw pixel.
As well as including vector.h KEEP ALL OF YOUR ROTATION CODE!!
</p>

<ul class="org-ul">
<li>Implement the following pseudocode</li>
</ul>
</div>

<div id="outline-container-org4eac838" class="outline-3">
<h3 id="org4eac838">Pseudocode</h3>
<div class="outline-text-3" id="text-org4eac838">
</div>
<div id="outline-container-orgfe79af0" class="outline-4">
<h4 id="orgfe79af0">Globals</h4>
<div class="outline-text-4" id="text-orgfe79af0">
<p>
create a global array of type <code>triangle_t</code> to store the projected
triangles.  The length of the array should be <code>N_MESH_FACES</code>. See def of
<code>N_MESH_FACES</code> above.
</p>

<p>
<code>triangle_t triangles_to_render[N_MESH_FACES];</code>
</p>
</div>
</div>

<div id="outline-container-orgf35e29c" class="outline-4">
<h4 id="orgf35e29c">Apply transformations And Projections (happens every frame)</h4>
<div class="outline-text-4" id="text-orgf35e29c">
<p class="verse">
each coordinate, of each point, of every vertex, from each triangle.<br />
<br />
for i = 0 to Number of triangles<br />
{<br />
&#xa0;&#xa0;&#xa0;&#xa0;declare variable called projected<sub>triangle</sub> <code>triangle_t</code><br />
&#xa0;&#xa0;&#xa0;&#xa0;for j = 0 to Number of vertices per triangle<br />
&#xa0;&#xa0;&#xa0;&#xa0;{<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;rotate <code>current_triangle.x</code><br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;rotate <code>currnet_triangle.y</code><br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;rotate <code>current_triangle.z</code><br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;apply camera Position to <code>current_triangle.z</code><br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;<code>2d_vertex = perspectiveProject(current (x, y, z))</code><br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;<code>projected_triangle.point[j] = 2d_vertex</code><br />
&#xa0;&#xa0;&#xa0;&#xa0;}<br />
&#xa0;&#xa0;&#xa0;&#xa0;<code>triangles_to_rende[i] = projected_triangle;</code><br />
}<br />
</p>
</div>
</div>

<div id="outline-container-org67c58f2" class="outline-4">
<h4 id="org67c58f2">Draw the vertices (happens every frame)</h4>
<div class="outline-text-4" id="text-org67c58f2">
<p>
For each triangle draw all the vertices.
this is pseudocode
</p>
<p class="verse">
for i = 0 to number of triangles<br />
&#xa0;&#xa0;&#xa0;&#xa0;<code>draw_rectangle(cur_triangle.vert1.x,cur_triangle.vert1.y)</code><br />
&#xa0;&#xa0;&#xa0;&#xa0;<code>draw_rectangle(cur_triangle.vert2.x,cur_triangle.vert2.y)</code><br />
&#xa0;&#xa0;&#xa0;&#xa0;<code>draw_rectangle(cur_triangle.vert3.x,cur_triangle.vert3.y)</code><br />
</p>
</div>
</div>
</div>

<div id="outline-container-org89171a6" class="outline-3">
<h3 id="org89171a6">Modules</h3>
<div class="outline-text-3" id="text-org89171a6">
<p>
Create these modules, I left out all the necessary
#inlcude statements for these modules and for the main file.
you will need to figure it out.
</p>
</div>

<div id="outline-container-org1f59076" class="outline-4">
<h4 id="org1f59076">mesh module</h4>
<div class="outline-text-4" id="text-org1f59076">
<p>
<b>mesh.h</b>
</p>

<div class="org-src-container">
<pre class="src src-c"><span class="org-preprocessor">#if</span><span class="org-negation-char"><span class="org-preprocessor">n</span></span><span class="org-preprocessor">def</span> MESH_H
<span class="org-preprocessor">#define</span> <span class="org-variable-name">MESH_H</span>

<span class="org-comment-delimiter">// </span><span class="org-comment">Define a constant for The number of vertices for our MESH</span>
<span class="org-preprocessor">#define</span> <span class="org-variable-name">N_MESH_VERTICES</span> <span class="org-comment-delimiter">//</span><span class="org-comment">TODO ?</span>

<span class="org-comment-delimiter">// </span><span class="org-comment">in mesh.h we declare our array of vertices we use</span>
<span class="org-comment-delimiter">// </span><span class="org-comment">extern keyword becuase we will initialize and define</span>
<span class="org-comment-delimiter">// </span><span class="org-comment">them in mesh.c</span>
<span class="org-keyword">extern</span> <span class="org-type">vec3_t</span> <span class="org-variable-name">mesh_vertices</span>[N_MESH_VERTICES];

<span class="org-comment-delimiter">//</span><span class="org-comment">6 cube faces, 2 triangles per face</span>
<span class="org-preprocessor">#define</span> <span class="org-variable-name">N_MESH_FACES</span> (<span class="org-comment-delimiter">//</span><span class="org-comment">TODO) </span>

<span class="org-comment-delimiter">//</span><span class="org-comment">declare an array of faces</span>
<span class="org-keyword">extern</span> <span class="org-type">face_t</span> <span class="org-variable-name">mesh_faces</span>[N_MESH_FACES];

<span class="org-preprocessor">#endif</span>

</pre>
</div>
<hr />
<p>
<b>mesh.c</b>
</p>
<div class="org-src-container">
<pre class="src src-c">
  <span class="org-type">vec3_t</span> <span class="org-variable-name">mesh_vertices</span>[N_MESH_VERTICES] = {
    {.x = -1, .y = -1, .z = -1}, <span class="org-comment-delimiter">//</span><span class="org-comment">1</span>
    {.x = -1, .y =  1, .z = -1}, <span class="org-comment-delimiter">//</span><span class="org-comment">2</span>
    {.x =  1, .y =  1, .z = -1}, <span class="org-comment-delimiter">//</span><span class="org-comment">3</span>
    {.x =  1, .y = -1, .z = -1}, <span class="org-comment-delimiter">//</span><span class="org-comment">4</span>
    {.x =  1, .y =  1, .z =  1}, <span class="org-comment-delimiter">//</span><span class="org-comment">5</span>
    {.x =  1, .y = -1, .z =  1}, <span class="org-comment-delimiter">//</span><span class="org-comment">6</span>
    {.x = -1, .y =  1, .z =  1}, <span class="org-comment-delimiter">//</span><span class="org-comment">7</span>
    {.x = -1, .y = -1, .z =  1}  <span class="org-comment-delimiter">//</span><span class="org-comment">8</span>
  };

<span class="org-comment-delimiter">//</span><span class="org-comment">TODO fill in the correct index 1 - 8</span>
  <span class="org-type">face_t</span> <span class="org-variable-name">mesh_faces</span>[N_MESH_FACES] = {
    <span class="org-comment-delimiter">//</span><span class="org-comment">front</span>
    { .a = , .b = , .c = }, 
    { .a = , .b = , .c = },
    <span class="org-comment-delimiter">//</span><span class="org-comment">right</span>
    { .a = , .b = , .c = },
    { .a = , .b = , .c = },
    <span class="org-comment-delimiter">//</span><span class="org-comment">back</span>
    { .a = , .b = , .c = },
    { .a = , .b = , .c = },
    <span class="org-comment-delimiter">//</span><span class="org-comment">left</span>
    { .a = , .b = , .c = },
    { .a = , .b = , .c = },
    <span class="org-comment-delimiter">//</span><span class="org-comment">top </span>
    { .a = , .b = , .c = },
    { .a = , .b = , .c = },
    <span class="org-comment-delimiter">//</span><span class="org-comment">bottom</span>
    { .a =6 , .b = 8, .c = 1 },
    { .a =6 , .b = 1, .c =4 },
  };
</pre>
</div>
</div>
</div>

<div id="outline-container-org73678c6" class="outline-4">
<h4 id="org73678c6">triangle Module</h4>
<div class="outline-text-4" id="text-org73678c6">
<p>
<b>triangle.h</b>
</p>
<div class="org-src-container">
<pre class="src src-c"><span class="org-preprocessor">#if</span><span class="org-negation-char"><span class="org-preprocessor">n</span></span><span class="org-preprocessor">def</span> TRIANGLE_H
<span class="org-preprocessor">#define</span> <span class="org-variable-name">TRIANGLE_H</span>



  <span class="org-keyword">typedef</span> <span class="org-keyword">struct</span> {
      <span class="org-type">int</span> <span class="org-variable-name">a</span>;
      <span class="org-type">int</span> <span class="org-variable-name">b</span>;
      <span class="org-type">int</span> <span class="org-variable-name">c</span>;
  } <span class="org-type">face_t</span>;

<span class="org-keyword">typedef</span> <span class="org-keyword">struct</span> {
  <span class="org-type">vec2_t</span> <span class="org-variable-name">points</span>[3];
}<span class="org-type">triangle_t</span>;

<span class="org-preprocessor">#endif</span>
</pre>
</div>

<p>
okok
</p>
</div>
</div>
</div>
</div>
</div>
</body>
</html>
