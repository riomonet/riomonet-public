<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>&lrm;</title>
<meta name="generator" content="Org Mode" />
<style>
  #content { max-width: 60em; margin: auto; }
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #e6e6e6;
    border-radius: 3px;
    background-color: #f2f2f2;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: auto;
  }
  pre.src:before {
    display: none;
    position: absolute;
    top: -8px;
    right: 12px;
    padding: 3px;
    color: #555;
    background-color: #f2f2f299;
  }
  pre.src:hover:before { display: inline; margin-top: 14px;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-authinfo::before { content: 'Authinfo'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .equation-container {
    display: table;
    text-align: center;
    width: 100%;
  }
  .equation {
    vertical-align: middle;
  }
  .equation-label {
    display: table-cell;
    text-align: right;
    vertical-align: middle;
  }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
</style>
<link rel="stylesheet" href="https://cdn.simplecss.org/simple.min.css" />
</head>
<body>
<div id="content" class="content">
<div id="outline-container-org0756311" class="outline-2">
<h2 id="org0756311">Perspective Divide</h2>
<div class="outline-text-2" id="text-org0756311">
<p class="verse">
- mechanical perspective projection<br />
<br />
&#xa0;&#xa0;The fundamental ideas behind mechanical perspective come from an understanding of how we actually view the world.<br />
<br />
&#xa0;&#xa0;In mechanical perspective projection, all light rays pass through the pictures plane and converge<br />
&#xa0;&#xa0;to a single point. That single point is your eye. The consequence of this is as follows.<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;1. In orthographic projection all the light rays move in parralel to one another and perpendicular to the picturep plane<br />
&#xa0;&#xa0;&#xa0;&#xa0;in perspecctive projection because every rayy is converging onto one point they will hit the projection plane at different<br />
&#xa0;&#xa0;&#xa0;&#xa0;angles.<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;2. As "things" move farther away from a viewer(or the projection plane), they appear smaller. That means space and mass appear smaller the<br />
&#xa0;&#xa0;&#xa0;&#xa0;farther it is from the viewer.  As they move closer they appear bigger.  Objects that are closer to the projection plane<br />
&#xa0;&#xa0;&#xa0;&#xa0;are going to take up more space on the projection plane, and Objects that are farther away will take up less space on the<br />
&#xa0;&#xa0;&#xa0;&#xa0;projection plane. Scale of things change as they get closer and farther away.<br />
&#xa0;&#xa0;&#xa0;&#xa0;so as the value of z goes up(distance goes up) x and y or going to get smaller and smaller. There is an invers relationship<br />
&#xa0;&#xa0;&#xa0;&#xa0;between x and y.<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;3. Explain field of view with a graphic: short interlude<br />
&#xa0;&#xa0;&#xa0;&#xa0;show on top view for x axis and<br />
&#xa0;&#xa0;&#xa0;&#xa0;side view for y axis.<br />
&#xa0;&#xa0;&#xa0;&#xa0;explain that is actually a cone.<br />
&#xa0;&#xa0;&#xa0;&#xa0;demo with hand blinders. 60 deg<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;4. Our goal is to find the x and y values on our projection plane to do that we will find the x value and the y value<br />
&#xa0;&#xa0;&#xa0;&#xa0;seperately. But using the laws of similiar triangles.<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;In similiar triangles have :<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;congruent( equal) angles<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;the ratio between the sides of similiar triangels is constant<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;in other words no matter how much we scale up or down the ratio of the bases<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;will be equal to the ration of the heights.<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;Basically similiar triangles have the same characteristics but are scaled to different proportions.<br />
<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;This is called the  Perspective Divide:<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;find x' using top view:<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;To find the x value lets look at a top view.<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;x'/x = z'/z  let z' = 1 (normalized)<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;multiple both sides by x and we get<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;x' = x/z<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;notice as z goes up x' gets smaller.<br />
<br />
<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;find y' using side view:<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;y'/y = z'/z  let z' = 1 (normalized)<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;multiple both sides by y and we get<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;y' = y/z<br />
&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;&#xa0;notice as z goes up y' gets smaller.<br />
</p>

<div class="org-src-container">
<pre class="src src-c">
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">compare the orgraphic with the perspecitve</span>
    <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">Ortho</span>
      <span style="font-weight: bold; text-decoration: underline;">vec2_t</span> <span style="font-weight: bold;">orthographic_project_point</span>(<span style="font-weight: bold; text-decoration: underline;">vec3_t</span> <span style="font-weight: bold; font-style: italic;">point_3d</span>)
    {
      <span style="font-weight: bold; text-decoration: underline;">vec2_t</span> <span style="font-weight: bold; font-style: italic;">projected_point</span> = {point_3d.x, point_3d.y};
      <span style="font-weight: bold;">return</span> projected_point;
    }

  <span style="font-weight: bold; font-style: italic;">//</span><span style="font-weight: bold; font-style: italic;">perspective</span>
      <span style="font-weight: bold; text-decoration: underline;">vec2_t</span> <span style="font-weight: bold;">perspective_project_point</span>(<span style="font-weight: bold; text-decoration: underline;">vec3_t</span> <span style="font-weight: bold; font-style: italic;">point_3d</span>) <span style="font-weight: bold; font-style: italic;">//</span><span style="font-weight: bold; font-style: italic;">TODO</span>
      {
        <span style="font-weight: bold; text-decoration: underline;">vec2_t</span> <span style="font-weight: bold; font-style: italic;">projected_point</span> = {point_3d.x /point_3d.z,
                                  point_3d.y / point_3d.z};
        <span style="font-weight: bold;">return</span> projected_point;
      }

  <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">new global called camera position</span>
   <span style="font-weight: bold; text-decoration: underline;">vec3_t</span> <span style="font-weight: bold; font-style: italic;">camera_position</span> = {0, 0, -5}; 

    <span style="font-weight: bold; font-style: italic;">//</span><span style="font-weight: bold; font-style: italic;">add adjustment for camera position moves</span>
  <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">the model away from the pictuare plane</span>
  <span style="font-weight: bold; text-decoration: underline;">void</span> <span style="font-weight: bold;">project_model</span>(<span style="font-weight: bold; text-decoration: underline;">void</span>)
  {
    <span style="font-weight: bold;">for</span> (<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; N_CUBE_POINTS; i++) {
      <span style="font-weight: bold; text-decoration: underline;">vec3_t</span> <span style="font-weight: bold; font-style: italic;">point</span> = cube_model[i];
      point.z -= camera_position.z; <span style="font-weight: bold; font-style: italic;">// </span><span style="font-weight: bold; font-style: italic;">TODO</span>
      <span style="font-weight: bold; font-style: italic;">/* </span><span style="font-weight: bold; font-style: italic;">vec2_t projected_point = orthographic_project_point(point);</span><span style="font-weight: bold; font-style: italic;"> */</span>
      <span style="font-weight: bold; text-decoration: underline;">vec2_t</span> <span style="font-weight: bold; font-style: italic;">projected_point</span> = perspective_project_point(point);
      projected_points[i] = projected_point;
    }
  }

<span style="font-weight: bold; font-style: italic;">//</span><span style="font-weight: bold; font-style: italic;">may need to ajust scaling factor</span>
  <span style="font-weight: bold; text-decoration: underline;">void</span> <span style="font-weight: bold;">scale_shape</span>(<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">scaling_factor</span>)
{

  <span style="font-weight: bold;">for</span>(<span style="font-weight: bold; text-decoration: underline;">int</span> <span style="font-weight: bold; font-style: italic;">i</span> = 0; i &lt; N_CUBE_POINTS; i++) {
    projected_points[i].x *= scaling_factor;
    projected_points[i].y *= scaling_factor;
  }
}

<span style="font-weight: bold; font-style: italic;">//</span><span style="font-weight: bold; font-style: italic;">notice how we are able to translate position here.</span>
<span style="font-weight: bold;">draw_rectangle</span>(point.x + (window_width / 2), point.y + (window_height / 2), 4, 4, 0xFF00FFFF);

</pre>
</div>
</div>
</div>
</div>
</body>
</html>
